// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/reservation.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EditUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditUserReqMultiError, or
// nil if none found.
func (m *EditUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetHeadImage()) < 1 {
		err := EditUserReqValidationError{
			field:  "HeadImage",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNickName()) < 1 {
		err := EditUserReqValidationError{
			field:  "NickName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Gender

	// no validation rules for Height

	// no validation rules for Weight

	if utf8.RuneCountInString(m.GetHometown()) < 1 {
		err := EditUserReqValidationError{
			field:  "Hometown",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Location

	// no validation rules for EmotionalStatus

	// no validation rules for Education

	// no validation rules for University

	// no validation rules for Occupation

	// no validation rules for Company

	// no validation rules for WechatNumber

	// no validation rules for PhoneNumber

	if len(errors) > 0 {
		return EditUserReqMultiError(errors)
	}

	return nil
}

// EditUserReqMultiError is an error wrapping multiple validation errors
// returned by EditUserReq.ValidateAll() if the designated constraints aren't met.
type EditUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUserReqMultiError) AllErrors() []error { return m }

// EditUserReqValidationError is the validation error returned by
// EditUserReq.Validate if the designated constraints aren't met.
type EditUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUserReqValidationError) ErrorName() string { return "EditUserReqValidationError" }

// Error satisfies the builtin error interface
func (e EditUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUserReqValidationError{}

// Validate checks the field values on EditUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EditUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EditUserRespMultiError, or
// nil if none found.
func (m *EditUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return EditUserRespMultiError(errors)
	}

	return nil
}

// EditUserRespMultiError is an error wrapping multiple validation errors
// returned by EditUserResp.ValidateAll() if the designated constraints aren't met.
type EditUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUserRespMultiError) AllErrors() []error { return m }

// EditUserRespValidationError is the validation error returned by
// EditUserResp.Validate if the designated constraints aren't met.
type EditUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUserRespValidationError) ErrorName() string { return "EditUserRespValidationError" }

// Error satisfies the builtin error interface
func (e EditUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUserRespValidationError{}

// Validate checks the field values on JoinActivityReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinActivityReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinActivityReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinActivityReqMultiError, or nil if none found.
func (m *JoinActivityReq) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinActivityReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return JoinActivityReqMultiError(errors)
	}

	return nil
}

// JoinActivityReqMultiError is an error wrapping multiple validation errors
// returned by JoinActivityReq.ValidateAll() if the designated constraints
// aren't met.
type JoinActivityReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinActivityReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinActivityReqMultiError) AllErrors() []error { return m }

// JoinActivityReqValidationError is the validation error returned by
// JoinActivityReq.Validate if the designated constraints aren't met.
type JoinActivityReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinActivityReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinActivityReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinActivityReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinActivityReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinActivityReqValidationError) ErrorName() string { return "JoinActivityReqValidationError" }

// Error satisfies the builtin error interface
func (e JoinActivityReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinActivityReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinActivityReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinActivityReqValidationError{}

// Validate checks the field values on JoinActivityResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinActivityResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinActivityResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinActivityRespMultiError, or nil if none found.
func (m *JoinActivityResp) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinActivityResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Price

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return JoinActivityRespMultiError(errors)
	}

	return nil
}

// JoinActivityRespMultiError is an error wrapping multiple validation errors
// returned by JoinActivityResp.ValidateAll() if the designated constraints
// aren't met.
type JoinActivityRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinActivityRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinActivityRespMultiError) AllErrors() []error { return m }

// JoinActivityRespValidationError is the validation error returned by
// JoinActivityResp.Validate if the designated constraints aren't met.
type JoinActivityRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinActivityRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinActivityRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinActivityRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinActivityRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinActivityRespValidationError) ErrorName() string { return "JoinActivityRespValidationError" }

// Error satisfies the builtin error interface
func (e JoinActivityRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinActivityResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinActivityRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinActivityRespValidationError{}

// Validate checks the field values on QueryUserInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryUserInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryUserInfoReqMultiError, or nil if none found.
func (m *QueryUserInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUserInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryUserInfoReqMultiError(errors)
	}

	return nil
}

// QueryUserInfoReqMultiError is an error wrapping multiple validation errors
// returned by QueryUserInfoReq.ValidateAll() if the designated constraints
// aren't met.
type QueryUserInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUserInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUserInfoReqMultiError) AllErrors() []error { return m }

// QueryUserInfoReqValidationError is the validation error returned by
// QueryUserInfoReq.Validate if the designated constraints aren't met.
type QueryUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUserInfoReqValidationError) ErrorName() string { return "QueryUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUserInfoReqValidationError{}

// Validate checks the field values on QueryUserInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryUserInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryUserInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryUserInfoRespMultiError, or nil if none found.
func (m *QueryUserInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryUserInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryUserInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryUserInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryUserInfoRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryUserInfoRespMultiError(errors)
	}

	return nil
}

// QueryUserInfoRespMultiError is an error wrapping multiple validation errors
// returned by QueryUserInfoResp.ValidateAll() if the designated constraints
// aren't met.
type QueryUserInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryUserInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryUserInfoRespMultiError) AllErrors() []error { return m }

// QueryUserInfoRespValidationError is the validation error returned by
// QueryUserInfoResp.Validate if the designated constraints aren't met.
type QueryUserInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryUserInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryUserInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryUserInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryUserInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryUserInfoRespValidationError) ErrorName() string {
	return "QueryUserInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryUserInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryUserInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryUserInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryUserInfoRespValidationError{}

// Validate checks the field values on QueryDetailsReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryDetailsReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDetailsReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDetailsReqMultiError, or nil if none found.
func (m *QueryDetailsReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDetailsReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryDetailsReqMultiError(errors)
	}

	return nil
}

// QueryDetailsReqMultiError is an error wrapping multiple validation errors
// returned by QueryDetailsReq.ValidateAll() if the designated constraints
// aren't met.
type QueryDetailsReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDetailsReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDetailsReqMultiError) AllErrors() []error { return m }

// QueryDetailsReqValidationError is the validation error returned by
// QueryDetailsReq.Validate if the designated constraints aren't met.
type QueryDetailsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDetailsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDetailsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDetailsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDetailsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDetailsReqValidationError) ErrorName() string { return "QueryDetailsReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryDetailsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDetailsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDetailsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDetailsReqValidationError{}

// Validate checks the field values on QueryDetailsResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryDetailsResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryDetailsResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryDetailsRespMultiError, or nil if none found.
func (m *QueryDetailsResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryDetailsResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryDetailsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryDetailsRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryDetailsRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryDetailsRespMultiError(errors)
	}

	return nil
}

// QueryDetailsRespMultiError is an error wrapping multiple validation errors
// returned by QueryDetailsResp.ValidateAll() if the designated constraints
// aren't met.
type QueryDetailsRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryDetailsRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryDetailsRespMultiError) AllErrors() []error { return m }

// QueryDetailsRespValidationError is the validation error returned by
// QueryDetailsResp.Validate if the designated constraints aren't met.
type QueryDetailsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryDetailsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryDetailsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryDetailsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryDetailsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryDetailsRespValidationError) ErrorName() string { return "QueryDetailsRespValidationError" }

// Error satisfies the builtin error interface
func (e QueryDetailsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryDetailsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryDetailsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryDetailsRespValidationError{}

// Validate checks the field values on Detail with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Detail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Detail with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DetailMultiError, or nil if none found.
func (m *Detail) ValidateAll() error {
	return m.validate(true)
}

func (m *Detail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetActivities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DetailValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DetailValidationError{
						field:  fmt.Sprintf("Activities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DetailValidationError{
					field:  fmt.Sprintf("Activities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEnlist() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DetailValidationError{
						field:  fmt.Sprintf("Enlist[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DetailValidationError{
						field:  fmt.Sprintf("Enlist[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DetailValidationError{
					field:  fmt.Sprintf("Enlist[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetEnlisted() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DetailValidationError{
						field:  fmt.Sprintf("Enlisted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DetailValidationError{
						field:  fmt.Sprintf("Enlisted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DetailValidationError{
					field:  fmt.Sprintf("Enlisted[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DetailMultiError(errors)
	}

	return nil
}

// DetailMultiError is an error wrapping multiple validation errors returned by
// Detail.ValidateAll() if the designated constraints aren't met.
type DetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailMultiError) AllErrors() []error { return m }

// DetailValidationError is the validation error returned by Detail.Validate if
// the designated constraints aren't met.
type DetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailValidationError) ErrorName() string { return "DetailValidationError" }

// Error satisfies the builtin error interface
func (e DetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailValidationError{}

// Validate checks the field values on QueryActivityInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityInfoReqMultiError, or nil if none found.
func (m *QueryActivityInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QueryActivityInfoReqMultiError(errors)
	}

	return nil
}

// QueryActivityInfoReqMultiError is an error wrapping multiple validation
// errors returned by QueryActivityInfoReq.ValidateAll() if the designated
// constraints aren't met.
type QueryActivityInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityInfoReqMultiError) AllErrors() []error { return m }

// QueryActivityInfoReqValidationError is the validation error returned by
// QueryActivityInfoReq.Validate if the designated constraints aren't met.
type QueryActivityInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityInfoReqValidationError) ErrorName() string {
	return "QueryActivityInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityInfoReqValidationError{}

// Validate checks the field values on QuerySwipersReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QuerySwipersReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySwipersReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySwipersReqMultiError, or nil if none found.
func (m *QuerySwipersReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySwipersReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuerySwipersReqMultiError(errors)
	}

	return nil
}

// QuerySwipersReqMultiError is an error wrapping multiple validation errors
// returned by QuerySwipersReq.ValidateAll() if the designated constraints
// aren't met.
type QuerySwipersReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySwipersReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySwipersReqMultiError) AllErrors() []error { return m }

// QuerySwipersReqValidationError is the validation error returned by
// QuerySwipersReq.Validate if the designated constraints aren't met.
type QuerySwipersReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySwipersReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySwipersReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySwipersReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySwipersReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySwipersReqValidationError) ErrorName() string { return "QuerySwipersReqValidationError" }

// Error satisfies the builtin error interface
func (e QuerySwipersReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySwipersReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySwipersReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySwipersReqValidationError{}

// Validate checks the field values on QuerySwipersResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QuerySwipersResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySwipersResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySwipersRespMultiError, or nil if none found.
func (m *QuerySwipersResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySwipersResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuerySwipersRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuerySwipersRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuerySwipersRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QuerySwipersRespMultiError(errors)
	}

	return nil
}

// QuerySwipersRespMultiError is an error wrapping multiple validation errors
// returned by QuerySwipersResp.ValidateAll() if the designated constraints
// aren't met.
type QuerySwipersRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySwipersRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySwipersRespMultiError) AllErrors() []error { return m }

// QuerySwipersRespValidationError is the validation error returned by
// QuerySwipersResp.Validate if the designated constraints aren't met.
type QuerySwipersRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySwipersRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySwipersRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySwipersRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySwipersRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySwipersRespValidationError) ErrorName() string { return "QuerySwipersRespValidationError" }

// Error satisfies the builtin error interface
func (e QuerySwipersRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySwipersResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySwipersRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySwipersRespValidationError{}

// Validate checks the field values on QueryActivityInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityInfoRespMultiError, or nil if none found.
func (m *QueryActivityInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryActivityInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryActivityInfoRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryActivityInfoRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryActivityInfoRespMultiError(errors)
	}

	return nil
}

// QueryActivityInfoRespMultiError is an error wrapping multiple validation
// errors returned by QueryActivityInfoResp.ValidateAll() if the designated
// constraints aren't met.
type QueryActivityInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityInfoRespMultiError) AllErrors() []error { return m }

// QueryActivityInfoRespValidationError is the validation error returned by
// QueryActivityInfoResp.Validate if the designated constraints aren't met.
type QueryActivityInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityInfoRespValidationError) ErrorName() string {
	return "QueryActivityInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityInfoRespValidationError{}

// Validate checks the field values on QueryMBTIReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryMBTIReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryMBTIReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryMBTIReqMultiError, or
// nil if none found.
func (m *QueryMBTIReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryMBTIReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return QueryMBTIReqMultiError(errors)
	}

	return nil
}

// QueryMBTIReqMultiError is an error wrapping multiple validation errors
// returned by QueryMBTIReq.ValidateAll() if the designated constraints aren't met.
type QueryMBTIReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMBTIReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMBTIReqMultiError) AllErrors() []error { return m }

// QueryMBTIReqValidationError is the validation error returned by
// QueryMBTIReq.Validate if the designated constraints aren't met.
type QueryMBTIReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryMBTIReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryMBTIReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryMBTIReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryMBTIReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryMBTIReqValidationError) ErrorName() string { return "QueryMBTIReqValidationError" }

// Error satisfies the builtin error interface
func (e QueryMBTIReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryMBTIReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryMBTIReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryMBTIReqValidationError{}

// Validate checks the field values on QueryMBTIResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryMBTIResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryMBTIResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryMBTIRespMultiError, or
// nil if none found.
func (m *QueryMBTIResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryMBTIResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryMBTIRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryMBTIRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryMBTIRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryMBTIRespMultiError(errors)
	}

	return nil
}

// QueryMBTIRespMultiError is an error wrapping multiple validation errors
// returned by QueryMBTIResp.ValidateAll() if the designated constraints
// aren't met.
type QueryMBTIRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryMBTIRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryMBTIRespMultiError) AllErrors() []error { return m }

// QueryMBTIRespValidationError is the validation error returned by
// QueryMBTIResp.Validate if the designated constraints aren't met.
type QueryMBTIRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryMBTIRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryMBTIRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryMBTIRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryMBTIRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryMBTIRespValidationError) ErrorName() string { return "QueryMBTIRespValidationError" }

// Error satisfies the builtin error interface
func (e QueryMBTIRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryMBTIResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryMBTIRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryMBTIRespValidationError{}

// Validate checks the field values on MBTIResult with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MBTIResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MBTIResult with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MBTIResultMultiError, or
// nil if none found.
func (m *MBTIResult) ValidateAll() error {
	return m.validate(true)
}

func (m *MBTIResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Extraversion

	// no validation rules for Sensing

	// no validation rules for Thinking

	// no validation rules for Judging

	if len(errors) > 0 {
		return MBTIResultMultiError(errors)
	}

	return nil
}

// MBTIResultMultiError is an error wrapping multiple validation errors
// returned by MBTIResult.ValidateAll() if the designated constraints aren't met.
type MBTIResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MBTIResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MBTIResultMultiError) AllErrors() []error { return m }

// MBTIResultValidationError is the validation error returned by
// MBTIResult.Validate if the designated constraints aren't met.
type MBTIResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MBTIResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MBTIResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MBTIResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MBTIResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MBTIResultValidationError) ErrorName() string { return "MBTIResultValidationError" }

// Error satisfies the builtin error interface
func (e MBTIResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMBTIResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MBTIResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MBTIResultValidationError{}

// Validate checks the field values on GenerateMBTIReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateMBTIReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateMBTIReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateMBTIReqMultiError, or nil if none found.
func (m *GenerateMBTIReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateMBTIReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateMBTIReqMultiError(errors)
	}

	return nil
}

// GenerateMBTIReqMultiError is an error wrapping multiple validation errors
// returned by GenerateMBTIReq.ValidateAll() if the designated constraints
// aren't met.
type GenerateMBTIReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateMBTIReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateMBTIReqMultiError) AllErrors() []error { return m }

// GenerateMBTIReqValidationError is the validation error returned by
// GenerateMBTIReq.Validate if the designated constraints aren't met.
type GenerateMBTIReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMBTIReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMBTIReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMBTIReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMBTIReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMBTIReqValidationError) ErrorName() string { return "GenerateMBTIReqValidationError" }

// Error satisfies the builtin error interface
func (e GenerateMBTIReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMBTIReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMBTIReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMBTIReqValidationError{}

// Validate checks the field values on GenerateMBTIResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateMBTIResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateMBTIResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateMBTIRespMultiError, or nil if none found.
func (m *GenerateMBTIResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateMBTIResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateMBTIRespMultiError(errors)
	}

	return nil
}

// GenerateMBTIRespMultiError is an error wrapping multiple validation errors
// returned by GenerateMBTIResp.ValidateAll() if the designated constraints
// aren't met.
type GenerateMBTIRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateMBTIRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateMBTIRespMultiError) AllErrors() []error { return m }

// GenerateMBTIRespValidationError is the validation error returned by
// GenerateMBTIResp.Validate if the designated constraints aren't met.
type GenerateMBTIRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMBTIRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMBTIRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMBTIRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMBTIRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMBTIRespValidationError) ErrorName() string { return "GenerateMBTIRespValidationError" }

// Error satisfies the builtin error interface
func (e GenerateMBTIRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMBTIResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMBTIRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMBTIRespValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReqMultiError, or
// nil if none found.
func (m *RegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterReqMultiError(errors)
	}

	return nil
}

// RegisterReqMultiError is an error wrapping multiple validation errors
// returned by RegisterReq.ValidateAll() if the designated constraints aren't met.
type RegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReqMultiError) AllErrors() []error { return m }

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on RegisterResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterRespMultiError, or
// nil if none found.
func (m *RegisterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return RegisterRespMultiError(errors)
	}

	return nil
}

// RegisterRespMultiError is an error wrapping multiple validation errors
// returned by RegisterResp.ValidateAll() if the designated constraints aren't met.
type RegisterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRespMultiError) AllErrors() []error { return m }

// RegisterRespValidationError is the validation error returned by
// RegisterResp.Validate if the designated constraints aren't met.
type RegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRespValidationError) ErrorName() string { return "RegisterRespValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRespValidationError{}

// Validate checks the field values on WXLoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WXLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WXLoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WXLoginReqMultiError, or
// nil if none found.
func (m *WXLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WXLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCode()) < 1 {
		err := WXLoginReqValidationError{
			field:  "Code",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEncryptedData()) < 1 {
		err := WXLoginReqValidationError{
			field:  "EncryptedData",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetIv()) < 1 {
		err := WXLoginReqValidationError{
			field:  "Iv",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WXLoginReqMultiError(errors)
	}

	return nil
}

// WXLoginReqMultiError is an error wrapping multiple validation errors
// returned by WXLoginReq.ValidateAll() if the designated constraints aren't met.
type WXLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WXLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WXLoginReqMultiError) AllErrors() []error { return m }

// WXLoginReqValidationError is the validation error returned by
// WXLoginReq.Validate if the designated constraints aren't met.
type WXLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WXLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WXLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WXLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WXLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WXLoginReqValidationError) ErrorName() string { return "WXLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e WXLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWXLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WXLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WXLoginReqValidationError{}

// Validate checks the field values on WXLoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WXLoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WXLoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WXLoginRespMultiError, or
// nil if none found.
func (m *WXLoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *WXLoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WXLoginRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WXLoginRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WXLoginRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return WXLoginRespMultiError(errors)
	}

	return nil
}

// WXLoginRespMultiError is an error wrapping multiple validation errors
// returned by WXLoginResp.ValidateAll() if the designated constraints aren't met.
type WXLoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WXLoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WXLoginRespMultiError) AllErrors() []error { return m }

// WXLoginRespValidationError is the validation error returned by
// WXLoginResp.Validate if the designated constraints aren't met.
type WXLoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WXLoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WXLoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WXLoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WXLoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WXLoginRespValidationError) ErrorName() string { return "WXLoginRespValidationError" }

// Error satisfies the builtin error interface
func (e WXLoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWXLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WXLoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WXLoginRespValidationError{}

// Validate checks the field values on QueryOrderListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryOrderListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrderListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrderListReqMultiError, or nil if none found.
func (m *QueryOrderListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrderListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := QueryOrderListReqValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return QueryOrderListReqMultiError(errors)
	}

	return nil
}

// QueryOrderListReqMultiError is an error wrapping multiple validation errors
// returned by QueryOrderListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryOrderListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrderListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrderListReqMultiError) AllErrors() []error { return m }

// QueryOrderListReqValidationError is the validation error returned by
// QueryOrderListReq.Validate if the designated constraints aren't met.
type QueryOrderListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrderListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrderListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrderListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrderListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrderListReqValidationError) ErrorName() string {
	return "QueryOrderListReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrderListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrderListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrderListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrderListReqValidationError{}

// Validate checks the field values on QueryOrderListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrderListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrderListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrderListRespMultiError, or nil if none found.
func (m *QueryOrderListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrderListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryOrderListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryOrderListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOrderListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryOrderListRespMultiError(errors)
	}

	return nil
}

// QueryOrderListRespMultiError is an error wrapping multiple validation errors
// returned by QueryOrderListResp.ValidateAll() if the designated constraints
// aren't met.
type QueryOrderListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrderListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrderListRespMultiError) AllErrors() []error { return m }

// QueryOrderListRespValidationError is the validation error returned by
// QueryOrderListResp.Validate if the designated constraints aren't met.
type QueryOrderListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrderListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrderListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrderListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrderListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrderListRespValidationError) ErrorName() string {
	return "QueryOrderListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrderListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrderListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrderListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrderListRespValidationError{}

// Validate checks the field values on GetSystemInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoReqMultiError, or nil if none found.
func (m *GetSystemInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSystemInfoReqMultiError(errors)
	}

	return nil
}

// GetSystemInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetSystemInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetSystemInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoReqMultiError) AllErrors() []error { return m }

// GetSystemInfoReqValidationError is the validation error returned by
// GetSystemInfoReq.Validate if the designated constraints aren't met.
type GetSystemInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoReqValidationError) ErrorName() string { return "GetSystemInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSystemInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoReqValidationError{}

// Validate checks the field values on GetSystemInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoRespMultiError, or nil if none found.
func (m *GetSystemInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalUsedMb

	// no validation rules for TotalMb

	// no validation rules for AvailableMb

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return GetSystemInfoRespMultiError(errors)
	}

	return nil
}

// GetSystemInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetSystemInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetSystemInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoRespMultiError) AllErrors() []error { return m }

// GetSystemInfoRespValidationError is the validation error returned by
// GetSystemInfoResp.Validate if the designated constraints aren't met.
type GetSystemInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoRespValidationError) ErrorName() string {
	return "GetSystemInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoRespValidationError{}

// Validate checks the field values on QueryActivityListByDayReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListByDayReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListByDayReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListByDayReqMultiError, or nil if none found.
func (m *QueryActivityListByDayReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListByDayReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Day

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return QueryActivityListByDayReqMultiError(errors)
	}

	return nil
}

// QueryActivityListByDayReqMultiError is an error wrapping multiple validation
// errors returned by QueryActivityListByDayReq.ValidateAll() if the
// designated constraints aren't met.
type QueryActivityListByDayReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListByDayReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListByDayReqMultiError) AllErrors() []error { return m }

// QueryActivityListByDayReqValidationError is the validation error returned by
// QueryActivityListByDayReq.Validate if the designated constraints aren't met.
type QueryActivityListByDayReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListByDayReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListByDayReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListByDayReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListByDayReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListByDayReqValidationError) ErrorName() string {
	return "QueryActivityListByDayReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListByDayReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListByDayReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListByDayReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListByDayReqValidationError{}

// Validate checks the field values on QueryActivityListByDayResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListByDayResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListByDayResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListByDayRespMultiError, or nil if none found.
func (m *QueryActivityListByDayResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListByDayResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryActivityListByDayRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryActivityListByDayRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryActivityListByDayRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryActivityListByDayRespMultiError(errors)
	}

	return nil
}

// QueryActivityListByDayRespMultiError is an error wrapping multiple
// validation errors returned by QueryActivityListByDayResp.ValidateAll() if
// the designated constraints aren't met.
type QueryActivityListByDayRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListByDayRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListByDayRespMultiError) AllErrors() []error { return m }

// QueryActivityListByDayRespValidationError is the validation error returned
// by QueryActivityListByDayResp.Validate if the designated constraints aren't met.
type QueryActivityListByDayRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListByDayRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListByDayRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListByDayRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListByDayRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListByDayRespValidationError) ErrorName() string {
	return "QueryActivityListByDayRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListByDayRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListByDayResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListByDayRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListByDayRespValidationError{}

// Validate checks the field values on QueryActivityListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListReqMultiError, or nil if none found.
func (m *QueryActivityListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryActivityListReqMultiError(errors)
	}

	return nil
}

// QueryActivityListReqMultiError is an error wrapping multiple validation
// errors returned by QueryActivityListReq.ValidateAll() if the designated
// constraints aren't met.
type QueryActivityListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListReqMultiError) AllErrors() []error { return m }

// QueryActivityListReqValidationError is the validation error returned by
// QueryActivityListReq.Validate if the designated constraints aren't met.
type QueryActivityListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListReqValidationError) ErrorName() string {
	return "QueryActivityListReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListReqValidationError{}

// Validate checks the field values on QueryActivityListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListRespMultiError, or nil if none found.
func (m *QueryActivityListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryActivityListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryActivityListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryActivityListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryActivityListRespMultiError(errors)
	}

	return nil
}

// QueryActivityListRespMultiError is an error wrapping multiple validation
// errors returned by QueryActivityListResp.ValidateAll() if the designated
// constraints aren't met.
type QueryActivityListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListRespMultiError) AllErrors() []error { return m }

// QueryActivityListRespValidationError is the validation error returned by
// QueryActivityListResp.Validate if the designated constraints aren't met.
type QueryActivityListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListRespValidationError) ErrorName() string {
	return "QueryActivityListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListRespValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for HeadImage

	// no validation rules for NickName

	// no validation rules for Gender

	// no validation rules for Height

	// no validation rules for Weight

	// no validation rules for Hometown

	// no validation rules for Location

	// no validation rules for EmotionalStatus

	// no validation rules for Education

	// no validation rules for University

	// no validation rules for Company

	// no validation rules for WechatNumber

	// no validation rules for PhoneNumber

	// no validation rules for Enlist

	// no validation rules for Enlisted

	// no validation rules for Activity

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Swiper with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Swiper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Swiper with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SwiperMultiError, or nil if none found.
func (m *Swiper) ValidateAll() error {
	return m.validate(true)
}

func (m *Swiper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Img

	// no validation rules for Url

	if len(errors) > 0 {
		return SwiperMultiError(errors)
	}

	return nil
}

// SwiperMultiError is an error wrapping multiple validation errors returned by
// Swiper.ValidateAll() if the designated constraints aren't met.
type SwiperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwiperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwiperMultiError) AllErrors() []error { return m }

// SwiperValidationError is the validation error returned by Swiper.Validate if
// the designated constraints aren't met.
type SwiperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwiperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwiperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwiperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwiperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwiperValidationError) ErrorName() string { return "SwiperValidationError" }

// Error satisfies the builtin error interface
func (e SwiperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwiper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwiperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwiperValidationError{}

// Validate checks the field values on Activity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Activity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActivityMultiError, or nil
// if none found.
func (m *Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for Time

	// no validation rules for Location

	// no validation rules for SmallImg

	// no validation rules for BigImg

	// no validation rules for Description

	// no validation rules for ActivitySerial

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return ActivityMultiError(errors)
	}

	return nil
}

// ActivityMultiError is an error wrapping multiple validation errors returned
// by Activity.ValidateAll() if the designated constraints aren't met.
type ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityMultiError) AllErrors() []error { return m }

// ActivityValidationError is the validation error returned by
// Activity.Validate if the designated constraints aren't met.
type ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityValidationError) ErrorName() string { return "ActivityValidationError" }

// Error satisfies the builtin error interface
func (e ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderSerial

	// no validation rules for ActivitySerial

	// no validation rules for Timestamp

	// no validation rules for Status

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

// Validate checks the field values on QuerySwipersResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuerySwipersResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuerySwipersResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuerySwipersResp_DataMultiError, or nil if none found.
func (m *QuerySwipersResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *QuerySwipersResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSwiperList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuerySwipersResp_DataValidationError{
						field:  fmt.Sprintf("SwiperList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuerySwipersResp_DataValidationError{
						field:  fmt.Sprintf("SwiperList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuerySwipersResp_DataValidationError{
					field:  fmt.Sprintf("SwiperList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuerySwipersResp_DataMultiError(errors)
	}

	return nil
}

// QuerySwipersResp_DataMultiError is an error wrapping multiple validation
// errors returned by QuerySwipersResp_Data.ValidateAll() if the designated
// constraints aren't met.
type QuerySwipersResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuerySwipersResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuerySwipersResp_DataMultiError) AllErrors() []error { return m }

// QuerySwipersResp_DataValidationError is the validation error returned by
// QuerySwipersResp_Data.Validate if the designated constraints aren't met.
type QuerySwipersResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuerySwipersResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuerySwipersResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuerySwipersResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuerySwipersResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuerySwipersResp_DataValidationError) ErrorName() string {
	return "QuerySwipersResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e QuerySwipersResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuerySwipersResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuerySwipersResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuerySwipersResp_DataValidationError{}

// Validate checks the field values on WXLoginResp_Data with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WXLoginResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WXLoginResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WXLoginResp_DataMultiError, or nil if none found.
func (m *WXLoginResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *WXLoginResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return WXLoginResp_DataMultiError(errors)
	}

	return nil
}

// WXLoginResp_DataMultiError is an error wrapping multiple validation errors
// returned by WXLoginResp_Data.ValidateAll() if the designated constraints
// aren't met.
type WXLoginResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WXLoginResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WXLoginResp_DataMultiError) AllErrors() []error { return m }

// WXLoginResp_DataValidationError is the validation error returned by
// WXLoginResp_Data.Validate if the designated constraints aren't met.
type WXLoginResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WXLoginResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WXLoginResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WXLoginResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WXLoginResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WXLoginResp_DataValidationError) ErrorName() string { return "WXLoginResp_DataValidationError" }

// Error satisfies the builtin error interface
func (e WXLoginResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWXLoginResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WXLoginResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WXLoginResp_DataValidationError{}

// Validate checks the field values on QueryOrderListResp_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrderListResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrderListResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrderListResp_DataMultiError, or nil if none found.
func (m *QueryOrderListResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrderListResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Pages

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetOrderList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryOrderListResp_DataValidationError{
						field:  fmt.Sprintf("OrderList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryOrderListResp_DataValidationError{
						field:  fmt.Sprintf("OrderList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOrderListResp_DataValidationError{
					field:  fmt.Sprintf("OrderList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryOrderListResp_DataMultiError(errors)
	}

	return nil
}

// QueryOrderListResp_DataMultiError is an error wrapping multiple validation
// errors returned by QueryOrderListResp_Data.ValidateAll() if the designated
// constraints aren't met.
type QueryOrderListResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrderListResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrderListResp_DataMultiError) AllErrors() []error { return m }

// QueryOrderListResp_DataValidationError is the validation error returned by
// QueryOrderListResp_Data.Validate if the designated constraints aren't met.
type QueryOrderListResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrderListResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrderListResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrderListResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrderListResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrderListResp_DataValidationError) ErrorName() string {
	return "QueryOrderListResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrderListResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrderListResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrderListResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrderListResp_DataValidationError{}

// Validate checks the field values on QueryActivityListByDayResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListByDayResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListByDayResp_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryActivityListByDayResp_DataMultiError, or nil if none found.
func (m *QueryActivityListByDayResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListByDayResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Pages

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetActivityList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActivityListByDayResp_DataValidationError{
						field:  fmt.Sprintf("ActivityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActivityListByDayResp_DataValidationError{
						field:  fmt.Sprintf("ActivityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActivityListByDayResp_DataValidationError{
					field:  fmt.Sprintf("ActivityList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryActivityListByDayResp_DataMultiError(errors)
	}

	return nil
}

// QueryActivityListByDayResp_DataMultiError is an error wrapping multiple
// validation errors returned by QueryActivityListByDayResp_Data.ValidateAll()
// if the designated constraints aren't met.
type QueryActivityListByDayResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListByDayResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListByDayResp_DataMultiError) AllErrors() []error { return m }

// QueryActivityListByDayResp_DataValidationError is the validation error
// returned by QueryActivityListByDayResp_Data.Validate if the designated
// constraints aren't met.
type QueryActivityListByDayResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListByDayResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListByDayResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListByDayResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListByDayResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListByDayResp_DataValidationError) ErrorName() string {
	return "QueryActivityListByDayResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListByDayResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListByDayResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListByDayResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListByDayResp_DataValidationError{}

// Validate checks the field values on QueryActivityListResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListResp_DataMultiError, or nil if none found.
func (m *QueryActivityListResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Pages

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetActivityList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActivityListResp_DataValidationError{
						field:  fmt.Sprintf("ActivityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActivityListResp_DataValidationError{
						field:  fmt.Sprintf("ActivityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActivityListResp_DataValidationError{
					field:  fmt.Sprintf("ActivityList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryActivityListResp_DataMultiError(errors)
	}

	return nil
}

// QueryActivityListResp_DataMultiError is an error wrapping multiple
// validation errors returned by QueryActivityListResp_Data.ValidateAll() if
// the designated constraints aren't met.
type QueryActivityListResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListResp_DataMultiError) AllErrors() []error { return m }

// QueryActivityListResp_DataValidationError is the validation error returned
// by QueryActivityListResp_Data.Validate if the designated constraints aren't met.
type QueryActivityListResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListResp_DataValidationError) ErrorName() string {
	return "QueryActivityListResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListResp_DataValidationError{}
