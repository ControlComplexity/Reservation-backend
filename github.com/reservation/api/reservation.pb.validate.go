// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/reservation.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateMBTIReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateMBTIReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateMBTIReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateMBTIReqMultiError, or nil if none found.
func (m *GenerateMBTIReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateMBTIReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateMBTIReqMultiError(errors)
	}

	return nil
}

// GenerateMBTIReqMultiError is an error wrapping multiple validation errors
// returned by GenerateMBTIReq.ValidateAll() if the designated constraints
// aren't met.
type GenerateMBTIReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateMBTIReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateMBTIReqMultiError) AllErrors() []error { return m }

// GenerateMBTIReqValidationError is the validation error returned by
// GenerateMBTIReq.Validate if the designated constraints aren't met.
type GenerateMBTIReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMBTIReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMBTIReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMBTIReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMBTIReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMBTIReqValidationError) ErrorName() string { return "GenerateMBTIReqValidationError" }

// Error satisfies the builtin error interface
func (e GenerateMBTIReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMBTIReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMBTIReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMBTIReqValidationError{}

// Validate checks the field values on GenerateMBTIResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateMBTIResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateMBTIResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateMBTIRespMultiError, or nil if none found.
func (m *GenerateMBTIResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateMBTIResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerateMBTIRespMultiError(errors)
	}

	return nil
}

// GenerateMBTIRespMultiError is an error wrapping multiple validation errors
// returned by GenerateMBTIResp.ValidateAll() if the designated constraints
// aren't met.
type GenerateMBTIRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateMBTIRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateMBTIRespMultiError) AllErrors() []error { return m }

// GenerateMBTIRespValidationError is the validation error returned by
// GenerateMBTIResp.Validate if the designated constraints aren't met.
type GenerateMBTIRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMBTIRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMBTIRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMBTIRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMBTIRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMBTIRespValidationError) ErrorName() string { return "GenerateMBTIRespValidationError" }

// Error satisfies the builtin error interface
func (e GenerateMBTIRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMBTIResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMBTIRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMBTIRespValidationError{}

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReqMultiError, or
// nil if none found.
func (m *RegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterReqMultiError(errors)
	}

	return nil
}

// RegisterReqMultiError is an error wrapping multiple validation errors
// returned by RegisterReq.ValidateAll() if the designated constraints aren't met.
type RegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReqMultiError) AllErrors() []error { return m }

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on RegisterResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterRespMultiError, or
// nil if none found.
func (m *RegisterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegisterRespMultiError(errors)
	}

	return nil
}

// RegisterRespMultiError is an error wrapping multiple validation errors
// returned by RegisterResp.ValidateAll() if the designated constraints aren't met.
type RegisterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRespMultiError) AllErrors() []error { return m }

// RegisterRespValidationError is the validation error returned by
// RegisterResp.Validate if the designated constraints aren't met.
type RegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRespValidationError) ErrorName() string { return "RegisterRespValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRespValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on QueryOrderListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QueryOrderListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrderListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrderListReqMultiError, or nil if none found.
func (m *QueryOrderListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrderListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryOrderListReqMultiError(errors)
	}

	return nil
}

// QueryOrderListReqMultiError is an error wrapping multiple validation errors
// returned by QueryOrderListReq.ValidateAll() if the designated constraints
// aren't met.
type QueryOrderListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrderListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrderListReqMultiError) AllErrors() []error { return m }

// QueryOrderListReqValidationError is the validation error returned by
// QueryOrderListReq.Validate if the designated constraints aren't met.
type QueryOrderListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrderListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrderListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrderListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrderListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrderListReqValidationError) ErrorName() string {
	return "QueryOrderListReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrderListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrderListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrderListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrderListReqValidationError{}

// Validate checks the field values on QueryOrderListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryOrderListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryOrderListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryOrderListRespMultiError, or nil if none found.
func (m *QueryOrderListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryOrderListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryOrderListRespMultiError(errors)
	}

	return nil
}

// QueryOrderListRespMultiError is an error wrapping multiple validation errors
// returned by QueryOrderListResp.ValidateAll() if the designated constraints
// aren't met.
type QueryOrderListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryOrderListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryOrderListRespMultiError) AllErrors() []error { return m }

// QueryOrderListRespValidationError is the validation error returned by
// QueryOrderListResp.Validate if the designated constraints aren't met.
type QueryOrderListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOrderListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOrderListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOrderListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOrderListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOrderListRespValidationError) ErrorName() string {
	return "QueryOrderListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOrderListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOrderListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOrderListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOrderListRespValidationError{}

// Validate checks the field values on GetSystemInfoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoReqMultiError, or nil if none found.
func (m *GetSystemInfoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSystemInfoReqMultiError(errors)
	}

	return nil
}

// GetSystemInfoReqMultiError is an error wrapping multiple validation errors
// returned by GetSystemInfoReq.ValidateAll() if the designated constraints
// aren't met.
type GetSystemInfoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoReqMultiError) AllErrors() []error { return m }

// GetSystemInfoReqValidationError is the validation error returned by
// GetSystemInfoReq.Validate if the designated constraints aren't met.
type GetSystemInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoReqValidationError) ErrorName() string { return "GetSystemInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSystemInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoReqValidationError{}

// Validate checks the field values on GetSystemInfoResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSystemInfoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSystemInfoRespMultiError, or nil if none found.
func (m *GetSystemInfoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemInfoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalUsedMb

	// no validation rules for TotalMb

	// no validation rules for AvailableMb

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return GetSystemInfoRespMultiError(errors)
	}

	return nil
}

// GetSystemInfoRespMultiError is an error wrapping multiple validation errors
// returned by GetSystemInfoResp.ValidateAll() if the designated constraints
// aren't met.
type GetSystemInfoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemInfoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemInfoRespMultiError) AllErrors() []error { return m }

// GetSystemInfoRespValidationError is the validation error returned by
// GetSystemInfoResp.Validate if the designated constraints aren't met.
type GetSystemInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemInfoRespValidationError) ErrorName() string {
	return "GetSystemInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSystemInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemInfoRespValidationError{}

// Validate checks the field values on QueryActivityListByDayReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListByDayReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListByDayReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListByDayReqMultiError, or nil if none found.
func (m *QueryActivityListByDayReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListByDayReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Day

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return QueryActivityListByDayReqMultiError(errors)
	}

	return nil
}

// QueryActivityListByDayReqMultiError is an error wrapping multiple validation
// errors returned by QueryActivityListByDayReq.ValidateAll() if the
// designated constraints aren't met.
type QueryActivityListByDayReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListByDayReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListByDayReqMultiError) AllErrors() []error { return m }

// QueryActivityListByDayReqValidationError is the validation error returned by
// QueryActivityListByDayReq.Validate if the designated constraints aren't met.
type QueryActivityListByDayReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListByDayReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListByDayReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListByDayReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListByDayReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListByDayReqValidationError) ErrorName() string {
	return "QueryActivityListByDayReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListByDayReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListByDayReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListByDayReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListByDayReqValidationError{}

// Validate checks the field values on QueryActivityListByDayResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListByDayResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListByDayResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListByDayRespMultiError, or nil if none found.
func (m *QueryActivityListByDayResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListByDayResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryActivityListByDayRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryActivityListByDayRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryActivityListByDayRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryActivityListByDayRespMultiError(errors)
	}

	return nil
}

// QueryActivityListByDayRespMultiError is an error wrapping multiple
// validation errors returned by QueryActivityListByDayResp.ValidateAll() if
// the designated constraints aren't met.
type QueryActivityListByDayRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListByDayRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListByDayRespMultiError) AllErrors() []error { return m }

// QueryActivityListByDayRespValidationError is the validation error returned
// by QueryActivityListByDayResp.Validate if the designated constraints aren't met.
type QueryActivityListByDayRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListByDayRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListByDayRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListByDayRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListByDayRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListByDayRespValidationError) ErrorName() string {
	return "QueryActivityListByDayRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListByDayRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListByDayResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListByDayRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListByDayRespValidationError{}

// Validate checks the field values on QueryActivityListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListReqMultiError, or nil if none found.
func (m *QueryActivityListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QueryActivityListReqMultiError(errors)
	}

	return nil
}

// QueryActivityListReqMultiError is an error wrapping multiple validation
// errors returned by QueryActivityListReq.ValidateAll() if the designated
// constraints aren't met.
type QueryActivityListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListReqMultiError) AllErrors() []error { return m }

// QueryActivityListReqValidationError is the validation error returned by
// QueryActivityListReq.Validate if the designated constraints aren't met.
type QueryActivityListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListReqValidationError) ErrorName() string {
	return "QueryActivityListReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListReqValidationError{}

// Validate checks the field values on QueryActivityListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListRespMultiError, or nil if none found.
func (m *QueryActivityListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryActivityListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryActivityListRespValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryActivityListRespValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Success

	// no validation rules for ErrorCode

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return QueryActivityListRespMultiError(errors)
	}

	return nil
}

// QueryActivityListRespMultiError is an error wrapping multiple validation
// errors returned by QueryActivityListResp.ValidateAll() if the designated
// constraints aren't met.
type QueryActivityListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListRespMultiError) AllErrors() []error { return m }

// QueryActivityListRespValidationError is the validation error returned by
// QueryActivityListResp.Validate if the designated constraints aren't met.
type QueryActivityListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListRespValidationError) ErrorName() string {
	return "QueryActivityListRespValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListRespValidationError{}

// Validate checks the field values on Activity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Activity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActivityMultiError, or nil
// if none found.
func (m *Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for Timestamp

	// no validation rules for Location

	// no validation rules for SmallImg

	// no validation rules for BigImg

	// no validation rules for Description

	if len(errors) > 0 {
		return ActivityMultiError(errors)
	}

	return nil
}

// ActivityMultiError is an error wrapping multiple validation errors returned
// by Activity.ValidateAll() if the designated constraints aren't met.
type ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityMultiError) AllErrors() []error { return m }

// ActivityValidationError is the validation error returned by
// Activity.Validate if the designated constraints aren't met.
type ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityValidationError) ErrorName() string { return "ActivityValidationError" }

// Error satisfies the builtin error interface
func (e ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityValidationError{}

// Validate checks the field values on QueryActivityListByDayResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListByDayResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListByDayResp_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QueryActivityListByDayResp_DataMultiError, or nil if none found.
func (m *QueryActivityListByDayResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListByDayResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Pages

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetActivityList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActivityListByDayResp_DataValidationError{
						field:  fmt.Sprintf("ActivityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActivityListByDayResp_DataValidationError{
						field:  fmt.Sprintf("ActivityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActivityListByDayResp_DataValidationError{
					field:  fmt.Sprintf("ActivityList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryActivityListByDayResp_DataMultiError(errors)
	}

	return nil
}

// QueryActivityListByDayResp_DataMultiError is an error wrapping multiple
// validation errors returned by QueryActivityListByDayResp_Data.ValidateAll()
// if the designated constraints aren't met.
type QueryActivityListByDayResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListByDayResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListByDayResp_DataMultiError) AllErrors() []error { return m }

// QueryActivityListByDayResp_DataValidationError is the validation error
// returned by QueryActivityListByDayResp_Data.Validate if the designated
// constraints aren't met.
type QueryActivityListByDayResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListByDayResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListByDayResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListByDayResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListByDayResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListByDayResp_DataValidationError) ErrorName() string {
	return "QueryActivityListByDayResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListByDayResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListByDayResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListByDayResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListByDayResp_DataValidationError{}

// Validate checks the field values on QueryActivityListResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QueryActivityListResp_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryActivityListResp_Data with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QueryActivityListResp_DataMultiError, or nil if none found.
func (m *QueryActivityListResp_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryActivityListResp_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Size

	// no validation rules for Pages

	// no validation rules for PageNum

	// no validation rules for PageSize

	for idx, item := range m.GetActivityList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryActivityListResp_DataValidationError{
						field:  fmt.Sprintf("ActivityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryActivityListResp_DataValidationError{
						field:  fmt.Sprintf("ActivityList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryActivityListResp_DataValidationError{
					field:  fmt.Sprintf("ActivityList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QueryActivityListResp_DataMultiError(errors)
	}

	return nil
}

// QueryActivityListResp_DataMultiError is an error wrapping multiple
// validation errors returned by QueryActivityListResp_Data.ValidateAll() if
// the designated constraints aren't met.
type QueryActivityListResp_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryActivityListResp_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryActivityListResp_DataMultiError) AllErrors() []error { return m }

// QueryActivityListResp_DataValidationError is the validation error returned
// by QueryActivityListResp_Data.Validate if the designated constraints aren't met.
type QueryActivityListResp_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryActivityListResp_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryActivityListResp_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryActivityListResp_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryActivityListResp_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryActivityListResp_DataValidationError) ErrorName() string {
	return "QueryActivityListResp_DataValidationError"
}

// Error satisfies the builtin error interface
func (e QueryActivityListResp_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryActivityListResp_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryActivityListResp_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryActivityListResp_DataValidationError{}
