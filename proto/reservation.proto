syntax = "proto3";
package reservation;

import "google/api/annotations.proto";
option go_package = "github.com/reservation/api";
service ReservationService {
  // 获取预约系统状态信息.
  rpc GetSystemInfo(GetSystemInfoReq) returns (GetSystemInfoResp) {
    option (google.api.http) = {
      get: "/v1/get_system_info"
    };
  }
 //用户注册
  rpc Register (RegisterReq)returns (RegisterResp){
    option (google.api.http) = {
      post: "/v1/user/register"
      body: "*"
    };
  }
 //微信登录
  rpc WXLogin (WXLoginReq)returns (WXLoginResp){
    option (google.api.http) = {
      post: "/v1/user/wx_login"
      body: "*"
    };
  }

 //生成MBTI
  rpc GenerateMBTI (GenerateMBTIReq)returns (GenerateMBTIResp){
    option (google.api.http) = {
      post: "/v1/user/generate_mbti"
      body: "*"
    };
  }

  //查询某人的MBTI结果
  rpc QueryMBTI(QueryMBTIReq) returns (QueryMBTIResp){

  }

  //查询订单接口
  rpc QueryOrderList (QueryOrderListReq)returns (QueryOrderListResp){
    option (google.api.http) = {
      post: "/v1/query/order_list"
      body: "*"
    };
  }
  //查询活动信息
  rpc QueryActivityInfo (QueryActivityInfoReq)returns (QueryActivityInfoResp){
    option (google.api.http) = {
      get: "/v1/query/activity/{id}"
    };
  }
  // 获取全部可参加的活动列表
  rpc QueryActivityList(QueryActivityListReq) returns (QueryActivityListResp) {
    option (google.api.http) = {
      post: "/v1/query/activity_list"
      body: "*"
    };
  }
  // 获取某一天的可参加的活动列表
  rpc QueryActivityListByDay(QueryActivityListByDayReq) returns (QueryActivityListByDayResp) {
    option (google.api.http) = {
      post: "/v1/query/activity_list_by_day"
      body: "*"
    };
  }
}
//查询活动详情请求
message QueryActivityInfoReq{
 //活动id
  int32 id = 1;
}

message QueryActivityInfoResp{
  Activity activity           = 1;
  // 是否成功访问
  bool success                = 2;
  // 错误码
  string errorCode            = 3;
  // 错误详情
  string errorMsg             = 4;
}

//查询MBTI请求
message QueryMBTIReq{
  //用户UUID
  string uuid = 1;
}
//查询MBTI返回
message QueryMBTIResp{
  //MBTI数据
  MBTIResult data                   = 1;
  // 是否成功注册
  bool success                = 2;
  // 错误码
  string errorCode            = 3;
  // 错误详情
  string errorMsg             = 4;
}

message MBTIResult{
  //注意力方向（精力来源），外倾
  float extraversion = 1;
  //认知方式（如何搜集信息），实感
  float sensing = 2;
  //判断方式（如何做决定），理智
  float thinking = 3;
  //生活方式（如何应对外部世界），判断
  float judging = 4;
}

message GenerateMBTIReq{

}

message GenerateMBTIResp{

}

message RegisterReq{

}

message RegisterResp{
  // 是否成功注册
  bool success                 = 8;
  // 错误码
  string errorCode            = 9;
  // 错误详情
  string errorMsg             = 10;
}

//微信登录请求
message WXLoginReq{
  //登录时获取的 code，可通过wx.login获取
  string code = 1;
  //云开发环境id
  string encryptedData = 2;
  //加密算法的初始向量
  string iv =3;
}

//微信登录返回
message WXLoginResp{
  message Data{
//    //用户唯一标识
//   string openId  = 1;
//   //会话密钥
//   string sessionKey = 2;
//   //用户在开放平台的唯一标识符，若当前小程序已绑定到微信开放平台帐号下会返回，详见 UnionID 机制说明。
//   string unionId = 3;
   //TOKEN
   string token = 1;
  }
  Data data                   = 1;
  // 是否成功访问
  bool success                = 2;
  // 错误码
  string errorCode            = 3;
  // 错误详情
  string errorMsg             = 4;
}

message QueryOrderListReq{
  //用户的uuid
  string uuid = 1;
}

message QueryOrderListResp{
  //活动列表数据
  message Data {
    // 当前页记录数
    int32 size                                          = 1;
    // 总页数
    int32 pages                                         = 2;
    // 本次请求结果实际页码, 一般与请求参数一致
    int32 pageNum                                      = 3 ;
    // 分页大小
    int32 pageSize                                     = 4 ;
    repeated Order orderList = 5;
    // 查询命中的对象总数, 请求参数trackTotalHits为真时生效, 否则返回-1
    int32 total                                         = 6;
  }
  //活动列表数据
  Data data         = 1;
  // 是否成功访问
  bool success                 = 8;
  // 错误码
  string errorCode            = 9;
  // 错误详情
  string errorMsg             = 10;
}

// GetSystemInfoReq 表示获取系统信息请求.
message GetSystemInfoReq {
}

// GetSystemInfoResp 表示获取系统信息响应.
message GetSystemInfoResp {
  // 已使用磁盘空间总数, 单位兆字节.
  int64 totalUsedMb          = 1;
  // 磁盘空间容量总数, 单位兆字节.
  int64 totalMb               = 2;
  // 可用磁盘容量, 单位兆字节.
  int64 availableMb           = 3;
  // 是否成功访问
  bool success                 = 8;
  // 错误码
  string errorCode            = 9;
  // 错误详情
  string errorMsg             = 10;
}

// 获取某一天的可参加的活动列表请求
message QueryActivityListByDayReq{
  //日期，格式为 "20221226"
  string day = 1;
  // 本次请求结果实际页码, 一般与请求参数一致
  int32 pageNum                                      = 2 ;
  // 分页大小
  int32 pageSize                                     = 3 ;
}

// 获取某一天的可参加的活动列表返回
message QueryActivityListByDayResp{
  //活动列表数据
  message Data {
    // 当前页记录数
    int32 size                                          = 1;
    // 总页数
    int32 pages                                         = 2;
    // 本次请求结果实际页码, 一般与请求参数一致
    int32 pageNum                                      = 3 ;
    // 分页大小
    int32 pageSize                                     = 4 ;
    // 活动列表
    repeated Activity activityList = 5;
    // 查询命中的对象总数, 请求参数trackTotalHits为真时生效, 否则返回-1
    int32 total                                         = 6;
  }
  //活动列表数据
  Data data         = 1;
  // 是否成功访问
  bool success                 = 8;
  // 错误码
  string errorCode            = 9;
  // 错误详情
  string errorMsg             = 10;
}
// 获取全部可参加的活动列表请求
message QueryActivityListReq{
}
// 获取全部可参加的活动列表返回
message QueryActivityListResp{
  //活动列表数据
  message Data {
    // 当前页记录数
    int32 size                                          = 1;
    // 总页数
    int32 pages                                         = 2;
    // 本次请求结果实际页码, 一般与请求参数一致
    int32 pageNum                                      = 3 ;
    // 分页大小
    int32 pageSize                                     = 4 ;
    // 活动列表
    repeated Activity activityList = 5;
    // 查询命中的对象总数, 请求参数trackTotalHits为真时生效, 否则返回-1
    int32 total                                         = 6;
  }
  //活动列表数据
  Data data         = 1;
  // 是否成功访问
  bool success                 = 8;
  // 错误码
  string errorCode            = 9;
  // 错误详情
  string errorMsg             = 10;
}
//活动详情
message Activity{
//活动ID
int64 id = 1;
  //名称
string name = 2;
//标签
string label = 3;
//价格
float  price = 4;
//时间戳
  string time = 5;
//
string location = 6;
//小图
string small_img = 7;
// 大图
string big_img = 8;
//描述
string description = 9;
  //活动序列号
string activitySerial = 10;
//创建时间
int64 createdAt = 11;
//更新时间
int64 updatedAt = 12;
}

//订单
message Order{
  //序列号
  string orderSerial = 1;
  //关联的活动序列号
  string activitySerial = 2;
  //时间戳
  int64 timestamp= 3;
  //状态。分为待付款，已付款，已退款
  string status = 4;
}